#include<stdlib.h> 

 #include<pthread.h> 

 #include<semaphore.h> 

 #include<unistd.h> 

 sem_t room; 

 sem_t chopstick[5]; 

 void * philosopher(void *); 

 void eat(int); 

 int main() 

 { 

         int i,a[5]; 

         pthread_t tid[5]; 

         sem_init(&room,0,4); 

         for(i=0;i<5;i++) 

         sem_init(&chopstick[i],0,1); 

         for(i=0;i<5;i++) 

         { 

                 a[i]=i; 

                 pthread_create(&tid[i],NULL,philosopher,(void *)&a[i]); 

         } 

         for(i=0;i<5;i++) 

         pthread_join(tid[i],NULL); 

 } 

 void * philosopher(void * num) 

 { 

         int phil=*(int *)num; 

         sem_wait(&room); 

         printf("\n philosopher %d has entered room",phil); 

         sem_wait(&chopstick[phil]); 

         sem_wait(&chopstick[(phil+1)%5]); 

         eat(phil); 

         sleep(2); 

         printf("\n philosopher %d has finished eating",phil); 

         sem_post(&chopstick[(phil+1)%5]); 

         sem_post(&chopstick[phil]); 

         sem_post(&room); 

 } 

 void eat(int phil) 

 { 

         printf("\n philosopher %d is  eating",phil); 

 } 

  

  

  

 OUTPUT: 

  

 philosopher 0 has entered room 

  philosopher 0 is  eating 

  philosopher 3 has entered room 

  philosopher 3 is  eating 

  philosopher 1 has entered room 

  philosopher 2 has entered room 

  philosopher 3 has finished eating 

  philosopher 4 has entered room 

  philosopher 0 has finished eating 

  philosopher 4 is  eating 

  philosopher 2 is  eating 

  philosopher 4 has finished eating 

  philosopher 2 has finished eating 

  philosopher 1 is  eating 

  philosopher 1 has finished eating 

 -------------------------------- 

 Process exited after 6.056 seconds with return value 0 

 Press any key to continue . . .
